service: blockster-api

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
  
provider:
  name: aws
  runtime: nodejs6.10
  environment:
    PARK_DYNAMODB_TABLE: "Park"
    USER_DYNAMODB_TABLE: "User"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PARK_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_DYNAMODB_TABLE}"

functions:
  create:
    handler: src/test/addPark.create
    events:
      - http:
          path: blockster/user
          method: post
          cors: true
  addDependencies:
    handler: src/park/addDependencies.addDependencies
    events:
      - http:
          path: park/addDependencies
          method: post
          cors: true

  getDependencies:
    handler: src/park/getDependents.getDependencies
    events:
      - http:
          path: park/getDependencies/{userId}
          method: get
          cors: true

  releaseDependencies:
    handler: src/park/releaseDependencies.releaseDependencies
    events:
      - http:
          path: park/releaseDependencies/{userId}
          method: delete
          cors: true

  removeDependencies:
    handler: src/park/removeDependencies.releaseDependencies
    events:
      - http:
          path: park/releaseDependencies
          method: delete
          cors: true

resources:
  Resources:
    parkTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
          - AttributeName: ParkId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: ParkId
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PARK_DYNAMODB_TABLE}
    userTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S  
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USER_DYNAMODB_TABLE}
